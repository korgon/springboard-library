// Inline block with vertical alignment
@mixin inline-block($vertical-align) {
	display: inline-block;
	zoom: 1;
	*display: inline;
	vertical-align: $vertical-align;
}

// Quick width and height sizing
@mixin sizing($width, $height) {
	width: $width;
	height: $height;
}

// Border radius with browser prefixes
@mixin border-radius($size) {
	-webkit-border-radius: $size;
	-moz-border-radius: $size;
	-ms-border-radius: $size;
	-o-border-radius: $size;
	border-radius: $size;
}

// Box shadow with browser prefixes
@mixin box-shadow ($size, $color) {
	-webkit-box-shadow: $size $color;
	-moz-box-shadow: $size $color;
	box-shadow: $size $color;
}

// Clearfix
@mixin clearfix($selector) {
	#{$selector}:before, #{$selector}:after {
		content: '';
		display: table;
	}
	#{$selector}:after {
		clear: both;
		zoom: 1;
	}
}

// Responsive breakpoint, pass in a pixel value
@mixin respond($breakpoint) {
	@media only screen and (max-width: $breakpoint + px) {
		@content;
	}
}

// Default background properties for svgs
@mixin background-svg-properties {
	background-repeat: no-repeat;
	background-position: center center;
}

// Background svg mixin with varables
@mixin background-svg($viewport-width: 32, $viewport-height: 32, $fill: #333, $path: null) {
	background-image: svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ' + $viewport-width + ' ' + $viewport-height + '"><path fill="' + $fill + '" d="' + $path + '"/></svg>');
}

// Function to create an optimized svg url
// From: http://codepen.io/jakob-e/pen/doMoML
@function svg-url($svg) {
	// Add missing namespace
	@if not str-index($svg,xmlns) {
		$svg: str-replace($svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"');
	}
	// Chunk up string in order to avoid "stack level too deep" error
	$encoded:'';
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg)/$slice);
	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1);
		// Encode
		$chunk: str-replace($chunk,'"', '\'');
		$chunk: str-replace($chunk,'%', '%25');
		$chunk: str-replace($chunk,'&', '%26');
		$chunk: str-replace($chunk,'#', '%23');
		$chunk: str-replace($chunk,'{', '%7B');
		$chunk: str-replace($chunk,'}', '%7D');
		$chunk: str-replace($chunk,'<', '%3C');
		$chunk: str-replace($chunk,'>', '%3E');
		// The maybe list
		// Keep size and compile time down ... only add on documented fail
		//
		// $chunk: str-replace($chunk, '|', '%7C');
		// $chunk: str-replace($chunk, '[', '%5B');
		// $chunk: str-replace($chunk, ']', '%5D');
		// $chunk: str-replace($chunk, '^', '%5E');
		// $chunk: str-replace($chunk, '`', '%60');
		// $chunk: str-replace($chunk, ';', '%3B');
		// $chunk: str-replace($chunk, '?', '%3F');
		// $chunk: str-replace($chunk, ':', '%3A');
		// $chunk: str-replace($chunk, '@', '%40');
		// $chunk: str-replace($chunk, '=', '%3D');
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}
	@return url("data:image/svg+xml,#{$encoded}");
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);
	@return if($index,
		str-slice($string, 1, $index - 1) + $replace +
		str-replace(str-slice($string, $index +
		str-length($search)), $search, $replace),
		$string);
}
